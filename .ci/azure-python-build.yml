parameters:
  sdist: false
  manylinux: false

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'

  - bash: echo "##vso[task.setvariable variable=pybin;]python"
    displayName: 'Choose default Python binary'
    condition: succeeded()

  - task: BatchScript@1
    displayName: 'VsDevCmd.bat'
    inputs:
      filename: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat
      arguments: -no_logo -arch=x64
      modifyEnvironment: true
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  - bash: |
      set -e

      case $(python.version) in
      3.5)
        LANG_ABI_VER="cp35-cp35m"
        ;;
      3.6)
        LANG_ABI_VER="cp36-cp36m"
        ;;
      3.7)
        LANG_ABI_VER="cp37-cp37m"
        ;;
      3.8)
        LANG_ABI_VER="cp38-cp38"
        ;;
      esac

      echo "##vso[task.setvariable variable=pybin;]/opt/python/${LANG_ABI_VER}/bin/python"
    displayName: 'Choose Python for manylinux'
    condition: and(succeeded(), eq(${{ parameters.manylinux }}, 'true'))

  - bash: |
      set -e

      case $(python.version) in
      3.5)
        FULL_VERSION=3.5.4
        MACOS_VERSION=10.6
        ;;
      3.6)
        FULL_VERSION=3.6.8
        MACOS_VERSION=10.9
        ;;
      3.7)
        FULL_VERSION=3.7.4
        MACOS_VERSION=10.9
        ;;
      3.8)
        FULL_VERSION=3.8.0
        MACOS_VERSION=10.9
        ;;
      esac

      INSTALLER_NAME=python-$FULL_VERSION-macosx$MACOS_VERSION.pkg
      curl https://www.python.org/ftp/python/$FULL_VERSION/$INSTALLER_NAME --output $INSTALLER_NAME
      sudo installer -pkg $INSTALLER_NAME -target /

      echo "##vso[task.setvariable variable=PATH]$PATH:/Users/runner/Library/Python/$(python.version)/bin"

      PYBIN=/usr/local/bin/python$(python.version)
      curl https://bootstrap.pypa.io/get-pip.py | "$PYBIN"
      echo "##vso[task.setvariable variable=pybin]$PYBIN"
    displayName: 'Install & Choose Python for Mac'
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

  - bash: |
      set -e -x
      which "$(pybin)"
      "$(pybin)" -c "import sys; print(sys.version)"
    displayName: 'Query Python version'

  - bash: |
      set -e -x
      "$(pybin)" -m pip -vvv install --user --upgrade pip
      "$(pybin)" -m pip -vvv install --user --upgrade "wheel>=0.31.0,<0.32" "setuptools>=38.6.0" twine milksnake
      "$(pybin)" -m pip --version
      "$(pybin)" -m wheel version
      "$(pybin)" -m twine --version
    displayName: 'Install dev dependencies'

  - bash: |
      set -e -x
      "$(pybin)" -m pip install --user black
      "$(pybin)" -m black --check -t py35 ./
    displayName: 'Check Python code format'
    condition: ne(variables['python.version'], '3.5')

  - bash: |
      "$(pybin)" setup.py sdist
    displayName: 'Build source distribution'
    condition: and(succeeded(), eq(${{ parameters.sdist }}, 'true'))

  - template: azure-setup-rust.yml

  - bash: |
      "$(pybin)" -m pip -vvv install --user dist/*
    displayName: 'Test install from source distribution'
    condition: and(succeeded(), eq(${{ parameters.sdist }}, 'true'))

  - script: |
      "$(pybin)" -m pip -vvv wheel . -w wheelhouse/
    displayName: 'Build wheels'
    condition: and(succeeded(), ne(${{ parameters.sdist }}, 'true'))

  - bash: |
      set -e -x
      for whl in wheelhouse/$(package_name)-*.whl; do
        auditwheel repair "$whl" -w wheelhouse/
      done
      ls -lh wheelhouse/
    displayName: 'auditwheel repair (manylinux)'
    condition: and(succeeded(), eq(${{ parameters.manylinux }}, 'true'), ne(${{ parameters.sdist }}, 'true'))

  - bash: |
      set -e -x
      "$(pybin)" -m pip install --user delocate
      delocate-wheel --version
      delocate-wheel wheelhouse/$(package_name)-*.whl
      ls -lh wheelhouse/
    displayName: 'Delocate wheels (macOS)'
    condition: and(succeeded(), ne(${{ parameters.sdist }}, 'true'), eq(variables['Agent.OS'], 'Darwin'))

  - bash: |
      set -e -x
      ls -lh wheelhouse/

      "$(pybin)" -m pip install $(package_name) --no-index -f wheelhouse/  --user
      "$(pybin)" -c "import sys; sys.path.remove(''); import $(package_name); print('Installed version: ' + $(package_name).__version__)"

      cd examples
      "$(pybin)" run_py.py

      "$(pybin)" -m pip uninstall -y $(package_name)
    displayName: 'Test installing wheels and run examples'
    condition: and(succeeded(), ne(${{ parameters.sdist }}, 'true'))

  - bash: |
      set -e -x
      mkdir -p dist
      cp wheelhouse/$(package_name)*.whl dist/
    displayName: 'Prepare wheels for publish'
    condition: and(succeeded(), ne(${{ parameters.sdist }}, 'true'), ne(${{ parameters.manylinux }}, 'true'))

  - bash: |
      set -e -x
      mkdir -p dist
      cp wheelhouse/$(package_name)*manylinux*.whl dist/
    displayName: 'Prepare wheels for publish (manylinux)'
    condition: and(succeeded(), ne(${{ parameters.sdist }}, 'true'), eq(${{ parameters.manylinux }}, 'true'))

  - bash: |
      set -e -x
      "$(pybin)" -m twine check dist/*
    displayName: 'Check artifacts with twine'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: 'dist'
      artifactName: '$(Agent.JobName) $(python.architecture)'
